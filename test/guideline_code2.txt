[func_def_start(0)]
이 함수는 main 함수로, 프로그램의 시작 포인트이다. 사용자로부터 입력을 받아 완전수인지 판단하는 역할을 한다.
[self_start(1)]
정수 n을 저장할 변수를 선언한다.
[self_end(1)]
[rep_start(1)]
무한 루프를 시작하므로 사용자가 계속해서 입력할 수 있도록 한다.
scanf를 이용해 n의 값을 입력받는다.
[cond_start(2)]
만약 n이 -1이면, 반복문을 종료하고 프로그램을 끝낸다.
[cond_end(2)]
[self_start(2)]
sum이라는 변수를 0으로 초기화하여 약수의 합을 저장할 준비를 한다. 
정수 i와 divisors 배열, count 변수를 선언하여 약수를 저장하고 계산할 준비를 한다.
[self_end(2)]
[rep_start(2)]
1부터 n-1까지 반복하면서 n의 약수를 찾기 위해 i를 증가시킨다.
[cond_start(3)]
현재의 i가 n의 약수인지 확인한다. 만약 약수라면, sum에 현재의 값 i를 더하고, 
divisors 배열에 i를 저장하며 count를 1 증가시킨다.
[cond_end(3)]
[rep_end(2)]
[self_start(2)]
sum이 n과 같은지 확인하여 n이 완전수인지 판단한다.
[cond_start(2)]
완전수일 경우, n을 약수들의 합으로 출력할 준비를 한다. 
따라서 printf를 이용해 n = 를 출력한다.
[rep_start(3)]
약수를 저장해둔 divisors 배열의 요소를 이용해 각 약수를 출력한다.
[cond_start(4)]
만약 현재 출력하고 있는 약수가 마지막 약수가 아니라면, " + "를 출력하여 약수들의 형태를 맞춘다.
[cond_end(4)]
[rep_end(3)]
마지막으로 약수들의 합을 출력하는 부분을 위해 printf문을 빈 문자열 없이 종료한다.
[cond_end(2)]
[cond_start(2)]
만약 sum이 n과 같지 않으면, 해당 숫자가 완전수가 아님을 표시하기 위해 결과를 출력한다.
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
프로그램의 종료를 위해 return 문을 실행한다.
[self_end(1)]
[func_def_end(0)]