[func_def_start(0)]
unsigned char 배열을 매개변수로 받아 유니코드 코드포인트를 반환하는 `utf8_to_codepoint` 함수를 정의하세요.
주어진 UTF-8 문자열을 코드포인트로 변환하는 역할을 합니다.
[self_start(1)]
초성 19개, 중성 21개, 종성 28개의 문자열 배열을 선언하세요.
각 한글 음절을 분해하기 위해 데이터 구조를 준비합니다.
[self_end(1)]
각 UTF-8 바이트를 조합하여 반환하는 코드 작성하세요.
세 바이트를 하나의 32비트 정수로 변환합니다.
[func_def_end(0)]

[main_def_start(0)]
main함수입니다.
[self_start(1)]
입력 문자열을 저장할 char 배열 input을 선언하고, 입력을 받기 위해 fgets 함수를 사용하세요.
입력된 문자열은 최대 300자로 제한합니다.
[self_end(1)]
[rep_start(1)]
input 배열의 각 문자를 반복하는 for문을 작성하세요.
문자열의 끝에 도달할 때까지 각 문자에 대해 처리를 진행합니다.
[rep_end(1)]
[self_start(2)]
현재 문자에 대한 포인터 ptr을 unsigned char 형식으로 선언하세요.
한글 음절을 처리하기 위해 문자 포인터를 만듭니다.
[self_end(2)]
[cond_start(2)]
ptr의 첫 바이트가 3바이트 UTF-8 시작인지 확인하세요.
3바이트로 인코딩된 한글 음절인지 확인하는 조건입니다.
[cond_end(2)]
[self_start(3)]
utf8_to_codepoint 함수를 호출하여 현재 문자의 코드포인트를 가져옵니다.
이 코드포인트를 통해 한글 음절을 분해합니다.
[self_end(3)]
[cond_start(3)]
코드포인트가 한글 완성형 범위에 있는지 확인하세요.
해당 범위에 속하면 초성, 중성, 종성을 계산합니다.
[cond_end(3)]
int형 변수 s_index를 선언하고, 코드포인트에서 기준 값인 0xAC00를 빼세요.
s_index는 각 한글 음절의 인덱스를 결정하는 데 사용됩니다.
[int형 변수 cho, jung, jong을 계산하고 결과를 출력하세요.]
각 음절의 초성, 중성, 종성을 출력하며 종성이 없을 경우 (없음)으로 출력합니다.
[self_start(3)]
문자 처리 후에는 i를 3만큼 증가시키세요.
3바이트로 이동하여 다음 음절을 처리합니다.
[self_end(3)]
[cond_end(2)]
[cond_start(2)]
UTF-8이 아닌 경우 i를 1 증가시켜 다음 문자로 이동하세요.
인코딩이 맞지 않는 문자는 무시하고 넘어갑니다.
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
프로그램을 종료하세요.
종료 코드를 반환하며 프로그램을 정상적으로 마무리합니다.
[self_end(1)]
[main_def_end(0)]