[func_def_start(0)]
정수형 배열로부터 짝수를 제거하고 홀수만 남기는 `removeEven` 함수를 정의하세요.
int형 배열 `arr`를 매개변수로 받아 원래의 값들을 포함합니다.
int형 배열 `result`를 매개변수로 받아 홀수로만 구성된 결과를 저장합니다.
int형 변수 `size`를 매개변수로 받아 배열의 크기를 입력받습니다.
[self_start(1)]
홀수의 개수를 저장할 int형 변수 `count`를 0으로 초기화합니다.
[self_end(1)]
[rep_start(1)]
i를 0부터 `size`보다 작을 때까지 1씩 증가시키며 반복하는 for문을 작성하세요.
배열 `arr`의 모든 요소를 검사합니다.
[cond_start(2)]
arr[i]가 홀수인지 확인하는 if문을 작성하세요.
배열 `arr`의 i번째 요소가 2로 나눈 나머지가 1인지 확인하는 조건문입니다.
[self_start(3)]
조건이 참이라면 `result` 배열의 count번째 위치에 arr[i]를 저장하세요.
홀수 값을 `result` 배열에 추가합니다.
[self_end(3)]
[self_start(3)]
count를 1 증가시켜 홀수 개수를 증가시킵니다.
[self_end(3)]
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
홀수의 개수 `count`를 반환하세요.
[self_end(1)]
[func_def_end(0)]
}

[main_def_start(0)]
main 함수를 정의하세요.
[self_start(1)]
정수를 저장할 int형 변수 `n`을 선언하세요.
배열의 크기를 의미합니다.
[self_end(1)]
[self_start(1)]
길이가 100인 int형 배열 `arr`을 선언하세요.
입력받을 정수 값을 저장하기 위한 배열입니다.
[self_end(1)]
[self_start(1)]
길이가 100인 int형 배열 `result`를 선언하세요.
홀수로 남은 값을 저장하기 위한 배열입니다.
[self_end(1)]
[self_start(1)]
정수를 저장할 int형 변수 `i`와 새로운 배열의 크기를 저장할 int형 변수 `newSize`를 선언하세요.
반복문과 결과 배열의 크기를 저장하는 데 사용됩니다.
[self_end(1)]
[self_start(1)]
scanf 함수를 사용하여 사용자로부터 n의 값을 입력 받으세요.
배열에 몇 개의 정수를 입력받을지를 결정합니다.
[self_end(1)]
[rep_start(1)]
i를 0부터 n보다 작을 때까지 1씩 증가시키며 반복하는 for문을 작성하세요.
n개 수만큼 정수를 입력받기 위한 반복문입니다.
[self_start(2)]
scanf 함수로 arr[i]에 정수를 입력 받으세요.
각각의 정수를 배열에 저장합니다.
[self_end(2)]
[rep_end(1)]
[self_start(1)]
removeEven 함수를 호출하여 arr 배열에서 짝수를 제거하고, 결과를 result에 저장하세요.
`removeEven` 함수의 첫 번째 인자는 원본 배열 `arr`입니다.
두 번째 인자는 홀수 값을 저장할 배열 `result`입니다.
세 번째 인자는 배열의 크기 `n`입니다.
[self_end(1)]
[self_start(1)]
newSize의 값을 출력하세요.
홀수의 개수를 출력합니다.
[self_end(1)]
[cond_start(1)]
홀수의 개수가 0보다 클 때만 동작하는 if문을 작성하세요.
헐수 개수가 존재할 때만 출력합니다.
[rep_start(2)]
i를 0부터 newSize보다 작을 때까지 1씩 증가시키며 반복하는 for문을 작성하세요.
결과 배열의 모든 홀수 요소를 출력하기 위한 반복문입니다.
[self_start(3)]
result[i]의 값을 출력하세요.
홀수 배열의 각 요소를 출력합니다.
[self_end(3)]
[cond_start(3)]
i가 newSize - 1보다 작을 때만 동작하는 if문을 작성하세요.
마지막 요소를 제외하고 공백을 출력하기 위한 조건문입니다.
[self_start(4)]
공백을 출력하세요.
결과 숫자 선을 구분합니다.
[self_end(4)]
[cond_end(3)]
[rep_end(2)]
[self_start(2)]
줄 바꿈을 출력하세요.
결과를 보기 좋게 하기 위한 줄 바꿈입니다.
[self_end(2)]
[cond_end(1)]
[self_start(1)]
프로그램을 종료하세요.
[self_end(1)]
[main_def_end(0)]