[main_def_start(0)]
목표: 스택 자료구조를 구현하고 다양한 명령을 처리하는 프로그램을 만드세요.

프로그램의 시작점인 main 함수를 정의하세요.
이 프로그램은 push, pop, size, empty, top 명령을 받아 스택을 조작하고 결과를 출력합니다.
string.h 헤더를 포함해서 strcmp 함수를 사용할 수 있도록 하세요.
[self_start(1)]
목표: 스택으로 사용할 배열을 만드세요.

int 타입 배열 stack을 크기 10000으로 선언하세요.
[self_end(1)]
[self_start(1)]
목표: 스택의 최상단 위치를 나타내는 변수를 만드세요.

int 타입 변수 top을 선언하고 -1로 초기화하세요.
-1은 스택이 비어있음을 나타냅니다.
[self_end(1)]
[self_start(1)]
목표: 명령의 개수를 저장할 변수를 만드세요.

int 타입 변수 N을 선언하세요.
[self_end(1)]
[self_start(1)]
목표: 명령어를 저장할 문자열 배열을 만드세요.

char 타입 배열 command를 크기 10으로 선언하세요.
[self_end(1)]
[self_start(1)]
목표: 명령의 개수를 입력받으세요.

scanf 함수와 %d 형식 지정자를 사용해서 N에 저장하세요.
주소 연산자(&)를 사용해야 합니다.
[self_end(1)]
[rep_start(1)]
목표: N개의 명령을 처리하는 반복문을 만드세요.

예: for (초기값; 조건; 증감) {
초기값: i를 0으로 시작, 조건: i가 N보다 작을 때까지, 반복: i를 1씩 증가
[self_start(2)]
목표: 명령어를 입력받으세요.

scanf 함수와 %s 형식 지정자를 사용해서 command 배열에 저장하세요.
[self_end(2)]
[cond_start(2)]
목표: push 명령인지 확인하세요.

if (조건) {
조건: strcmp 함수를 사용해서 command와 "push"가 같은지 확인하는 조건을 작성하세요.
[self_start(3)]
목표: push할 값을 저장할 변수를 만드세요.

int 타입 변수 x를 선언하세요.
[self_end(3)]
[self_start(3)]
목표: push할 값을 입력받으세요.

scanf 함수와 %d 형식 지정자를 사용해서 x에 저장하세요.
주소 연산자(&)를 사용해야 합니다.
[self_end(3)]
[self_start(3)]
목표: 스택의 최상단 위치를 증가시키세요.

top 변수를 1 증가시키세요.
[self_end(3)]
[self_start(3)]
목표: 스택에 값을 저장하세요.

stack[top]에 x 값을 대입하세요.
[self_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: pop 명령인지 확인하세요.

else if (조건) {
조건: strcmp 함수를 사용해서 command와 "pop"이 같은지 확인하는 조건을 작성하세요.
[cond_start(3)]
목표: 스택이 비어있는지 확인하세요.

if (조건) {
조건: top이 -1인지 확인하는 조건을 작성하세요.
[self_start(4)]
목표: 스택이 비어있으므로 -1을 출력하세요.

printf 함수를 사용해서 "-1\n"을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
목표: 스택이 비어있지 않은 경우를 처리하세요.

else 문을 사용하세요.
[self_start(4)]
목표: 스택의 최상단 값을 출력하세요.

printf 함수와 %d 형식 지정자를 사용해서 stack[top]을 출력하고 줄바꿈을 추가하세요.
[self_end(4)]
[self_start(4)]
목표: 스택의 최상단 위치를 감소시키세요.

top 변수를 1 감소시키세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: size 명령인지 확인하세요.

else if (조건) {
조건: strcmp 함수를 사용해서 command와 "size"가 같은지 확인하는 조건을 작성하세요.
[self_start(3)]
목표: 스택의 크기를 출력하세요.

printf 함수와 %d 형식 지정자를 사용해서 top+1을 출력하고 줄바꿈을 추가하세요.
top이 -1부터 시작하므로 실제 크기는 top+1입니다.
[self_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: empty 명령인지 확인하세요.

else if (조건) {
조건: strcmp 함수를 사용해서 command와 "empty"가 같은지 확인하는 조건을 작성하세요.
[cond_start(3)]
목표: 스택이 비어있는지 확인하세요.

if (조건) {
조건: top이 -1인지 확인하는 조건을 작성하세요.
[self_start(4)]
목표: 스택이 비어있으므로 1을 출력하세요.

printf 함수를 사용해서 "1\n"을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
목표: 스택이 비어있지 않은 경우를 처리하세요.

else 문을 사용하세요.
[self_start(4)]
목표: 스택이 비어있지 않으므로 0을 출력하세요.

printf 함수를 사용해서 "0\n"을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: top 명령인지 확인하세요.

else if (조건) {
조건: strcmp 함수를 사용해서 command와 "top"이 같은지 확인하는 조건을 작성하세요.
[cond_start(3)]
목표: 스택이 비어있는지 확인하세요.

if (조건) {
조건: top이 -1인지 확인하는 조건을 작성하세요.
[self_start(4)]
목표: 스택이 비어있으므로 -1을 출력하세요.

printf 함수를 사용해서 "-1\n"을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
목표: 스택이 비어있지 않은 경우를 처리하세요.

else 문을 사용하세요.
[self_start(4)]
목표: 스택의 최상단 값을 출력하세요.

printf 함수와 %d 형식 지정자를 사용해서 stack[top]을 출력하고 줄바꿈을 추가하세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
목표: 프로그램을 정상 종료하세요.

return 0을 작성해서 성공적인 종료를 알리세요.
[self_end(1)]
[main_def_end(0)]