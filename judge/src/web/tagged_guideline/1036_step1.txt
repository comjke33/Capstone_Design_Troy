[func_def_start(0)]
`digit_count_lcm` 함수를 정의하세요.
정수형 변수 a와 b를 매개변수로 받습니다. 두 개의 양의 정수에서 최소공배수를 구하는 함수입니다.
[self_start(1)]
max라는 정수형 변수를 선언하고 a와 b 중 더 큰 값을 할당하세요.
두 수의 최소공배수를 찾기 위해 비교할 것입니다.
[self_end(1)]
[rep_start(1)]
무한 루프를 시작하는 while문을 작성하세요.
최소공배수를 구할 때까지 계속 수행합니다.
[cond_start(2)]
max가 a로 나누어 떨어지고 b로 나누어 떨어지면 동작하는 if문을 작성하세요.
현재 max가 a와 b의 공배수인지 확인하는 조건문입니다.
[self_start(3)]
조건이 참이라면 루프를 종료하세요.
최소공배수를 찾은 것이므로 반복문을 종료합니다.
[self_end(3)]
[cond_end(2)]
[self_start(2)]
max의 값을 1 증가시켜 다음 후보를 검사하세요.
공배수를 찾기 위해 max를 증가시킵니다.
[self_end(2)]
[rep_end(1)]
[self_start(1)]
count라는 정수형 변수를 선언하고 0으로 초기화하세요.
최소공배수의 자리 수를 세기 위한 변수입니다.
[self_end(1)]
[self_start(1)]
result라는 정수형 변수를 max로 초기화하세요.
최소공배수를 저장하기 위한 변수입니다.
[self_end(1)]
[rep_start(1)]
result가 0보다 큰 동안 동작하는 while문을 작성하세요.
result의 자릿수를 세기 위한 반복문입니다.
[self_start(2)]
result를 10으로 나누세요.
result의 자릿수를 줄입니다.
[self_end(2)]
[self_start(2)]
count를 1 증가시키세요.
자릿수를 세기 위해 카운트합니다.
[self_end(2)]
[rep_end(1)]
[self_start(1)]
count 변수를 반환하세요.
최소공배수의 자릿수를 결과로 제공합니다.
[self_end(1)]
[func_def_end(0)]

[main_def_start(0)]
main 함수를 정의하세요.
[self_start(1)]
정수형 변수 a와 b를 선언하세요.
두 개의 양의 정수를 입력받기 위한 변수들입니다.
[self_end(1)]
[self_start(1)]
scanf 함수를 사용해 입력된 값을 a와 b에 저장하세요.
두 수를 사용자로부터 입력받습니다.
[self_end(1)]
[self_start(1)]
digit_count_lcm(a, b) 함수를 호출하여 결과를 출력하세요.
입력받은 두 수의 최소공배수의 자리 수를 출력합니다.
[self_end(1)]
[self_start(1)]
프로그램을 종료하세요.
형식에 맞춰 주 프로그램을 마무리합니다.
[self_end(1)]
[main_def_end(0)]