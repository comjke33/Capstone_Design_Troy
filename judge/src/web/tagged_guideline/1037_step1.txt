[main_def_start(0)]
목표: 입력받은 수가 소수인지 판별하는 프로그램을 만드세요.
프로그램의 시작점인 main 함수를 정의하세요.
반환 타입은 int이고 매개변수는 void로 설정하세요.
이 프로그램은 정수를 입력받아 소수이면 1, 소수가 아니면 0을 출력합니다.
[self_start(1)]
목표: 검사할 정수를 저장할 변수를 만드세요.
int 타입 변수 n을 선언하세요.
[self_end(1)]
[self_start(1)]
목표: 사용자로부터 정수를 입력받으세요.
scanf 함수와 %d 형식 지정자를 사용해서 n에 저장하세요.
주소 연산자(&)를 사용해야 합니다.
[self_end(1)]
[self_start(1)]
목표: 소수 여부를 나타내는 플래그 변수를 만드세요.
int 타입 변수 is_prime을 선언하고 1로 초기화하세요.
소수가 아님이 판명되면 0으로 변경할 예정입니다.
[self_end(1)]
[cond_start(1)]
목표: 2보다 작은 수는 소수가 아니므로 따로 처리하세요.
if (조건) {
조건: n이 2보다 작은지 확인하는 조건을 작성하세요.
[self_start(2)]
목표: 소수가 아니므로 플래그를 변경하세요.
is_prime 변수를 0으로 설정하세요.
[self_end(2)]
[cond_end(1)]
[cond_start(1)]
목표: 2 이상의 수에 대해 소수 판별을 수행하세요.
else 문을 사용하세요.
[rep_start(2)]
목표: 2부터 n의 제곱근까지 나누어보는 반복문을 만드세요.
예: for (초기값; 조건; 증감) {
초기값: i를 2로 시작, 조건: i*i가 n보다 작거나 같을 때까지, 반복: i를 1씩 증가
[cond_start(3)]
목표: 현재 수로 나누어떨어지는지 확인하세요.
if (조건) {
조건: n을 i로 나눈 나머지가 0인지 확인하는 조건을 작성하세요.
[self_start(4)]
목표: 나누어떨어지므로 소수가 아닙니다.
is_prime 변수를 0으로 설정하세요.
[self_end(4)]
[self_start(4)]
목표: 더 이상 검사할 필요가 없으므로 반복문을 종료하세요.
break문을 사용하세요.
[self_end(4)]
[cond_end(3)]
[rep_end(2)]
[cond_end(1)]
[self_start(1)]
목표: 소수 판별 결과를 출력하세요.
printf 함수와 %d 형식 지정자를 사용해서 is_prime 변수를 출력하세요.
[self_end(1)]
[self_start(1)]
목표: 프로그램을 정상 종료하세요.
return 0을 작성해서 성공적인 종료를 알리세요.
[self_end(1)]
[main_def_end(0)]