[func_def_start(0)]
`is_same` 함수를 정의하세요.
const char형 포인터 변수 a를 매개변수로 받습니다.
const char형 포인터 변수 b를 매개변수로 받습니다.
[rep_start(1)]
두 문자열 a와 b가 모두 끝나지 않을 때 동작하는 while문을 작성하세요.
[cond_start(2)]
문자 a와 b의 현재 문자가 다르면 동작하는 if문을 작성하세요.
문자 a의 현재 문자와 b의 현재 문자가 같은지 비교하는 조건문입니다.
[self_start(3)]
조건이 참이라면 0을 반환하세요.
둘의 문자열이 같지 않다는 의미입니다.
[self_end(3)]
[cond_end(2)]
[self_start(2)]
포인터 a를 1 증가시켜 다음 문자로 이동하세요.
[self_end(2)]
[self_start(2)]
포인터 b를 1 증가시켜 다음 문자로 이동하세요.
[self_end(2)]
[rep_end(1)]
[self_start(1)]
문자열 a와 b 모두 끝에 도달했는지 확인하여 비교 결과를 반환하세요.
[func_def_end(0)]

[main_def_start(0)]
main 함수를 정의하세요.
[self_start(1)]
정수형 상수 MAX에 10000을 할당해 스택의 크기를 정하세요.
[self_end(1)]
[self_start(1)]
정수를 저장할 길이 10000인 배열 stack을 선언하세요.
[self_end(1)]
[self_start(1)]
스택의 top 인덱스를 나타내는 정수형 변수 top_index를 -1로 초기화하세요.
[self_end(1)]
[self_start(1)]
정수형 변수 N을 선언하여 입력되는 명령의 개수를 저장합니다.
[self_end(1)]
[self_start(1)]
scanf 함수를 사용하여 N을 입력 받으세요.
[self_end(1)]
[self_start(1)]
길이가 6인 char 배열 command를 선언하세요.
[self_end(1)]
[rep_start(1)]
N번 만큼 반복하는 for문을 작성하세요.
각 명령을 처리하는 단계입니다.
[self_start(2)]
명령을 입력받기 위해 scanf 함수를 사용하여 command에 문자열을 저장하세요.
[self_end(2)]
[cond_start(2)]
`command`가 "push"와 같으면 동작하는 if문을 작성하세요.
스택에 정수를 추가하는 명령입니다.
[self_start(3)]
정수형 변수 x를 선언하세요.
[self_end(3)]
[self_start(3)]
scanf 함수를 사용하여 x에 정수를 입력 받도록 하세요.
[self_end(3)]
[self_start(3)]
top_index를 1 증가시켜 스택의 위쪽 위치를 업데이트하세요.
[self_end(3)]
[self_start(3)]
stack 배열의 top_index 위치에 x를 저장하세요.
스택에 정수를 추가하는 부분입니다.
[self_end(3)]
[cond_end(2)]
[cond_start(2)]
`command`가 "pop"과 같으면 동작하는 if문을 작성하세요.
스택에서 정수를 제거하고 출력하는 명령입니다.
[cond_start(3)]
top_index가 -1이라면, 스택이 비어있음을 의미합니다.
[self_start(4)]
-1을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
그렇지 않다면, 스택의 top_index 위치의 정수를 출력하세요.
[self_start(4)]
printf 함수를 사용하여 stack의 top_index 위치 값을 출력하세요.
[self_end(4)]
[self_start(4)]
top_index를 1 감소시켜 스택에서 값을 제거하세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[cond_start(2)]
`command`가 "size"와 같으면 동작하는 if문을 작성하세요.
스택의 현재 크기를 출력하는 명령입니다.
[self_start(3)]
top_index에 1을 더해 현재 스택의 개수를 출력하세요.
[self_end(3)]
[cond_end(2)]
[cond_start(2)]
`command`가 "empty"와 같으면 동작하는 if문을 작성하세요.
스택이 비어있는지 확인하는 명령입니다.
[cond_start(3)]
top_index가 -1이라면, 스택이 비어있음을 의미합니다.
[self_start(4)]
1을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
그렇지 않다면, 스택이 비어있지 않음을 의미합니다.
[self_start(4)]
0을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[cond_start(2)]
`command`가 "top"과 같으면 동작하는 if문을 작성하세요.
스택의 가장 위에있는 정수를 출력하는 명령입니다.
[cond_start(3)]
top_index가 -1이라면, 스택이 비어있음을 의미합니다.
[self_start(4)]
-1을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
그렇지 않다면, 스택의 top_index 위치의 정수를 출력하세요.
[self_start(4)]
printf 함수를 사용하여 stack의 top_index 위치 값을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
프로그램을 정상적으로 종료하세요.
[self_end(1)]
[main_def_end(0)]