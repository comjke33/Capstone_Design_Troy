[main_def_start(0)]
목표: 문자열에 포함된 모든 숫자의 곱을 구하는 프로그램을 만드세요.

프로그램의 시작점인 main 함수를 정의하세요.
반환 타입은 int이고 매개변수는 void로 설정하세요.
이 프로그램은 입력받은 문자열에서 숫자들을 찾아 모두 곱한 결과를 출력합니다.
[self_start(1)]
목표: 입력받을 문자열을 저장할 공간을 만드세요.

변수명은 str로 하고 char 타입 배열을 크기 101로 선언하세요.
[self_end(1)]
[self_start(1)]
목표: 숫자들의 곱을 저장할 변수를 만드세요.

int 타입 변수 product를 선언하고 1로 초기화하세요.
곱셈 연산을 위해 초기값은 반드시 1이어야 합니다.
[self_end(1)]
[self_start(1)]
목표: 숫자가 발견되었는지 확인하기 위한 플래그 변수를 만드세요.

int 타입 변수 has_digit을 선언하고 0으로 초기화하세요.
숫자를 하나라도 발견하면 1로 변경할 예정입니다.
[self_end(1)]
[self_start(1)]
목표: 사용자로부터 문자열을 입력받으세요.

scanf 함수와 %s 형식 지정자를 사용해서 str 배열에 저장하세요.
[self_end(1)]
[rep_start(1)]
목표: 문자열의 각 문자를 하나씩 검사하는 반복문을 만드세요.

예: for (초기값; 조건; 증감) {
초기값: i를 0으로 시작, 조건: str[i]가 널 문자가 아닐 때까지, 반복: i를 1씩 증가
[cond_start(2)]
목표: 현재 살펴보고 있는 문자가 숫자인지 판단하세요.

if (조건) {
조건: 숫자 0부터 9까지의 범위에 있는지 비교하는 조건을 작성하세요.
[self_start(3)]
목표: 숫자를 발견했으므로 곱을 계산하세요.

product 변수에 현재 숫자를 곱하세요.
문자를 숫자로 변환하기 위해 '0'을 빼야 합니다.
[self_end(3)]
[self_start(3)]
목표: 숫자를 발견했다는 표시를 남기세요.

has_digit 변수를 1로 설정하세요.
[self_end(3)]
[cond_end(2)]
[rep_end(1)]
[cond_start(1)]
목표: 숫자가 하나라도 발견되었는지 확인하세요.

if (조건) {
조건: has_digit이 참인지 확인하는 조건을 작성하세요.
[self_start(2)]
목표: 숫자가 발견되었으므로 곱의 결과를 출력하세요.

printf 함수와 %d 형식 지정자를 사용해서 product 변수를 출력하세요.
[self_end(2)]
[cond_end(1)]
[cond_start(1)]
목표: 숫자가 하나도 발견되지 않은 경우를 처리하세요.

else 문을 사용하세요.
[self_start(2)]
목표: 숫자가 없으므로 0을 출력하세요.

printf 함수를 사용해서 문자열 "0"을 출력하세요.
[self_end(2)]
[cond_end(1)]
[self_start(1)]
목표: 프로그램을 정상 종료하세요.

return 0을 작성해서 성공적인 종료를 알리세요.
[self_end(1)]
[main_def_end(0)]