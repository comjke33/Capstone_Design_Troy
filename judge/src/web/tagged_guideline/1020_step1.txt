[main_def_start(0)]
목표: 문자열에서 대문자와 소문자 개수를 세는 프로그램을 만드세요.

프로그램의 시작점인 main 함수를 정의하세요.
반환 타입은 int이고 매개변수는 void로 설정하세요.
이 프로그램은 사용자가 입력한 문자열을 받아서 그 안에 있는 대문자와 소문자가 각각 몇 개인지 세어서 화면에 보여주는 역할을 합니다.
[self_start(1)]
목표: 입력받을 문자열을 저장할 공간을 만드세요.

문자열을 저장할 배열을 선언하세요.
변수명은 str로 하고, char 타입으로 선언하세요.
크기는 101로 설정하면 최대 100글자까지 입력받을 수 있습니다.
마지막 한 자리는 문자열 끝을 나타내는 널 문자를 위한 공간입니다.
[self_end(1)]
[self_start(1)]
목표: 대문자와 소문자 개수를 세기 위한 변수를 만드세요.

대문자 개수를 세는 변수 upper와 소문자 개수를 세는 변수 lower를 선언하세요.
둘 다 int 타입으로 선언하고 0으로 초기화하세요.
이 변수들은 대문자나 소문자를 하나 찾을 때마다 1씩 증가하는 카운터 역할을 합니다.
[self_end(1)]
[self_start(1)]
목표: 사용자로부터 문자열을 입력받으세요.

scanf 함수를 사용해서 문자열을 입력받아 str 배열에 저장하세요.
문자열을 입력받는 형식 지정자를 사용하세요.
[self_end(1)]
[rep_start(1)]
목표: 문자열의 각 문자를 하나씩 검사하는 반복문을 만드세요.

예: for (초기값; 조건; 증감) {
초기값: 반복할 변수 i를 선언하고 0부터 시작하세요.
조건: 현재 문자가 문자열의 끝이 아닐 때까지로 설정하세요.
반복: 매 반복마다 i를 1씩 증가시키세요.
[cond_start(2)]
목표: 현재 살펴보고 있는 문자가 대문자인지 판단하세요.

if (조건) {
조건: 대문자 A부터 Z까지의 범위에 있는지 비교하는 조건을 작성하세요.
[self_start(3)]
목표: 대문자를 발견했으면 대문자 개수를 증가시키세요.
upper 변수를 1 증가시키세요.
[self_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: 현재 살펴보고 있는 문자가 소문자인지 판단하세요.

else if (조건) {
조건: 소문자 a부터 z까지의 범위에 있는지 비교하는 조건을 작성하세요.
[self_start(3)]
목표: 소문자를 발견했으면 소문자 개수를 증가시키세요.

lower 변수를 1 증가시키세요.
[self_end(3)]
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
목표: 대문자 개수를 화면에 출력하세요.

printf 함수를 사용해서 upper 변수의 값을 출력하세요.
정수를 출력하는 형식 지정자를 사용하고 줄바꿈을 추가하세요.
[self_end(1)]
[self_start(1)]
목표: 소문자 개수를 화면에 출력하세요.

printf 함수를 사용해서 lower 변수의 값을 출력하세요.
정수를 출력하는 형식 지정자를 사용하고 줄바꿈은 추가하지 마세요.
[self_end(1)]
[self_start(1)]
목표: 프로그램을 정상 종료하세요.

return문을 사용해서 프로그램이 정상적으로 종료되었음을 알리세요.
성공적인 종료를 나타내는 값을 반환하세요.
[self_end(1)]
[main_def_end(0)]
