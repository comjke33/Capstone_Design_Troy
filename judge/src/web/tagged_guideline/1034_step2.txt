[func_def_start(0)]
목표: 모든 자릿수가 홀수인 수의 개수를 세는 함수를 만드세요.

함수명은 count_all_odd_digits로 하고 매개변수는 배열 arr과 배열 크기 size를 받도록 하세요.
[self_start(1)]
목표: 개수를 세기 위한 변수를 만드세요.

변수 count를 선언하고 0으로 초기화하세요.
[self_end(1)]
[rep_start(1)]
목표: 배열의 모든 요소를 하나씩 검사하는 반복문을 만드세요.

변수 i를 사용해서 배열의 모든 요소를 순회하세요.
[self_start(2)]
목표: 현재 수와 플래그 변수를 준비하세요.

검사할 수 n과 모든 자릿수가 홀수인지 확인할 변수 all_odd를 선언하세요.
[self_end(2)]
[rep_start(2)]
목표: 수의 모든 자릿수를 검사하는 반복문을 만드세요.

변수 n이 0보다 클 때까지 반복하세요.
[self_start(3)]
목표: 현재 자릿수를 추출하세요.

변수 digit에 n의 마지막 자릿수를 저장하세요.
[self_end(3)]
[cond_start(3)]
목표: 현재 자릿수가 짝수인지 판단하세요.

짝수일 때 all_odd를 0으로 설정하고 반복을 중단하세요.
[cond_end(3)]
[self_start(3)]
목표: 다음 자릿수로 이동하세요.

n을 10으로 나누어 다음 자릿수를 준비하세요.
[self_end(3)]
[rep_end(2)]
[cond_start(2)]
목표: 모든 자릿수가 홀수인지 확인하세요.

all_odd가 참일 때만 count를 증가시키세요.
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
목표: 조건을 만족하는 수의 개수를 반환하세요.

return문을 사용해서 count 변수를 반환하세요.
[self_end(1)]
[func_def_end(0)]
[main_def_start(0)]
목표: n개의 정수를 입력받아 모든 자릿수가 홀수인 수의 개수를 출력하는 프로그램을 만드세요.

프로그램의 시작점인 main 함수를 정의하세요.
[self_start(1)]
목표: 필요한 변수들을 선언하고 개수를 입력받으세요.

변수 n과 배열 arr을 선언하고 n을 입력받으세요.
[self_end(1)]
[rep_start(1)]
목표: n개의 정수를 입력받는 반복문을 만드세요.

변수 i를 사용해서 n번 반복하면서 각 배열 요소에 입력받으세요.
[rep_end(1)]
[self_start(1)]
목표: 결과를 출력하세요.

count_all_odd_digits 함수를 호출해서 결과를 출력하고 프로그램을 종료하세요.
[self_end(1)]
[main_def_end(0)]