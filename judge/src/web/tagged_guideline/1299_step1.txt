[main_def_start(0)]
주요 함수에 시작하기 위해 main 함수를 정의하세요.
[self_start(1)]
길이가 101인 문자를 저장할 수 있는 배열로 선언된 문자열 변수 word를 선언하세요.
이 문자열은 프로그램을 통해 입력받을 단어를 저장하는 데 사용됩니다.
[self_end(1)]
[self_start(1)]
printf 함수를 사용하여 단어를 입력받습니다.
여기서 "%s"는 문자열을 입력받는 형식 지정자입니다.
word는 입력된 문자열을 저장합니다.
[self_end(1)]
[self_start(1)]
len 변수를 선언하고 word의 길이로 초기화하세요.
strlen 함수를 사용하여 문자열의 길이를 계산할 수 있습니다.
[self_end(1)]
[self_start(1)]
isPalindrome 변수를 1로 초기화하여 문장이 팰린드롬인지 여부를 나타내세요.
팰린드롬의 경우 1을 선언하고, 그렇지 않은 경우 0으로 설정할 수 있습니다.
[self_end(1)]
[rep_start(1)]
이중 for문을 사용하여 str의 길이를 반으로 줄여주는 i를 선언하세요.
문자의 반절에 이르는 반복문을 통해 앞쪽과 뒤쪽의 문자를 비교합니다.
[cond_start(2)]
문자열의 앞쪽과 뒤쪽의 인덱스를 비교하는 if문을 작성하세요.
문자가 일치하지 않는다면 isPalindrome이 0으로 설정됩니다.
[self_start(3)]
word[i]와 word[len-1-i]의 값을 비교하여 같지 않으면 isPalindrome 값을 0으로 설정합니다.
문자가 같지 않다면 이는 팰린드롬이 아니므로 isPalindrome 값을 0으로 설정합니다.
[self_end(3)]
[self_start(3)]
break문을 사용하여 while문을 종료하세요.
문자열이 팰린드롬이 아니면 while문을 종료하여 추가 검사를 중단합니다.
[self_end(3)]
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
isPalindrome이 최종적으로 1일 경우 결과 출력에 사용할 수 있도록 printf 함수를 작성하세요.
printf 함수는 isPalindrome 값을 출력합니다.
[self_end(1)]
[self_start(1)]
프로그램의 정상적인 종료를 위해 0을 반환하세요.
프로그램 실행의 성공적인 종료를 알립니다.
[self_end(1)]
[main_def_end(0)]