[func_def_start(0)]
정수형 배열을 매개변수로 받는 `count_odd` 함수를 정의하세요.
int형 포인터 배열 arr을 매개변수로 받습니다.
정수형 변수 size를 매개변수로 받아 배열의 크기를 나타냅니다.
[self_start(1)]
정수형 변수 count를 0으로 초기화하세요.
홀수의 개수를 세기 위해 사용됩니다.
[self_end(1)]
[rep_start(1)]
i가 0부터 size보다 작을 때까지 1씩 증가하는 for문을 작성하세요.
배열의 모든 요소를 검사하기 위한 반복문입니다.
[cond_start(2)]
arr[i]가 홀수인지 검사하는 if문을 작성하세요.
배열의 i번째 요소가 2로 나눈 나머지가 1인지 확인합니다.
[self_start(3)]
조건이 참이라면 count를 1 증가시키세요.
홀수를 찾았으므로 개수를 세는 과정입니다.
[self_end(3)]
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
count를 반환하세요.
홀수의 전체 개수를 의미합니다.
[self_end(1)]
[func_def_end(0)]

[func_def_start(0)]
정수형 배열을 매개변수로 받는 `count_even` 함수를 정의하세요.
int형 포인터 배열 arr을 매개변수로 받습니다.
정수형 변수 size를 매개변수로 받아 배열의 크기를 나타냅니다.
[self_start(1)]
정수형 변수 count를 0으로 초기화하세요.
짝수의 개수를 세기 위해 사용됩니다.
[self_end(1)]
[rep_start(1)]
i가 0부터 size보다 작을 때까지 1씩 증가하는 for문을 작성하세요.
배열의 모든 요소를 검사하기 위한 반복문입니다.
[cond_start(2)]
arr[i]가 짝수인지 검사하는 if문을 작성하세요.
배열의 i번째 요소가 2로 나눈 나머지가 0인지 확인합니다.
[self_start(3)]
조건이 참이라면 count를 1 증가시키세요.
짝수를 찾았으므로 개수를 세는 과정입니다.
[self_end(3)]
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
count를 반환하세요.
짝수의 전체 개수를 의미합니다.
[self_end(1)]
[func_def_end(0)]

[main_def_start(0)]
main 함수를 정의하세요.
[self_start(1)]
길이가 10인 int 배열 arr을 선언하세요.
 입력 받을 정수의 개수를 저장하기 위해 사용됩니다.
[self_end(1)]
[rep_start(1)]
i가 0부터 9까지 반복하는 for문을 작성하세요.
사용자로부터 10개의 정수를 입력 받기 위한 반복문입니다.
[self_start(2)]
scanf 함수를 사용하여 arr[i]에 정수를 입력 받으세요.
이때, 각 요소에 직접 값을 입력받습니다.
[self_end(2)]
[rep_end(1)]
[self_start(1)]
count_odd 함수를 호출하여 배열 arr과 크기 10을 인자로 전달하고 결과를 출력하세요.
배열에서 홀수의 개수를 출력하는 부분입니다.
[self_end(1)]
[self_start(1)]
count_even 함수를 호출하여 배열 arr과 크기 10을 인자로 전달하고 결과를 출력하세요.
배열에서 짝수의 개수를 출력하는 부분입니다.
[self_end(1)]
[self_start(1)]
프로그램을 종료하세요.
[self_end(1)]
[main_def_end(0)]