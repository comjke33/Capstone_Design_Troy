[main_def_start(0)]
목표: 원형 큐 자료구조를 구현하고 다양한 명령을 처리하는 프로그램을 만드세요.

프로그램의 시작점인 main 함수를 정의하세요.
이 프로그램은 push, pop, size, empty, front, back 명령을 받아 큐를 조작하고 결과를 출력합니다.
string.h 헤더를 포함해서 strcmp 함수를 사용할 수 있도록 하세요.
[self_start(1)]
목표: 큐로 사용할 배열을 만드세요.

int 타입 배열 queue를 크기 2000000으로 선언하세요.
[self_end(1)]
[self_start(1)]
목표: 큐의 앞쪽 위치를 나타내는 변수를 만드세요.

int 타입 변수 front를 선언하고 0으로 초기화하세요.
front는 큐에서 제거될 요소의 위치를 가리킵니다.
[self_end(1)]
[self_start(1)]
목표: 큐의 뒤쪽 위치를 나타내는 변수를 만드세요.

int 타입 변수 rear를 선언하고 -1로 초기화하세요.
rear는 큐에 마지막으로 추가된 요소의 위치를 가리킵니다.
[self_end(1)]
[self_start(1)]
목표: 큐의 현재 크기를 저장할 변수를 만드세요.

int 타입 변수 size를 선언하고 0으로 초기화하세요.
[self_end(1)]
[self_start(1)]
목표: 명령의 개수를 저장할 변수를 만드세요.

int 타입 변수 n을 선언하세요.
[self_end(1)]
[self_start(1)]
목표: 명령의 개수를 입력받으세요.

scanf 함수와 %d 형식 지정자를 사용해서 n에 저장하세요.
주소 연산자(&)를 사용해야 합니다.
[self_end(1)]
[self_start(1)]
목표: 명령어를 저장할 문자열 배열을 만드세요.

char 타입 배열 command를 크기 10으로 선언하세요.
[self_end(1)]
[self_start(1)]
목표: push 명령에서 사용할 값을 저장할 변수를 만드세요.

int 타입 변수 x를 선언하세요.
[self_end(1)]
[rep_start(1)]
목표: n개의 명령을 처리하는 반복문을 만드세요.

예: for (초기값; 조건; 증감) {
초기값: i를 0으로 시작, 조건: i가 n보다 작을 때까지, 반복: i를 1씩 증가
[self_start(2)]
목표: 명령어를 입력받으세요.

scanf 함수와 %s 형식 지정자를 사용해서 command 배열에 저장하세요.
[self_end(2)]
[cond_start(2)]
목표: push 명령인지 확인하세요.

if (조건) {
조건: strcmp 함수를 사용해서 command와 "push"가 같은지 확인하는 조건을 작성하세요.
[self_start(3)]
목표: push할 값을 입력받으세요.

scanf 함수와 %d 형식 지정자를 사용해서 x에 저장하세요.
주소 연산자(&)를 사용해야 합니다.
[self_end(3)]
[self_start(3)]
목표: 원형 큐에서 rear 위치를 다음으로 이동시키세요.

rear를 (rear+1) % 2000000으로 업데이트하세요.
모듈로 연산을 사용해서 배열의 끝에서 처음으로 순환하도록 합니다.
[self_end(3)]
[self_start(3)]
목표: 큐에 값을 저장하세요.

queue[rear]에 x 값을 대입하세요.
[self_end(3)]
[self_start(3)]
목표: 큐의 크기를 증가시키세요.

size 변수를 1 증가시키세요.
[self_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: pop 명령인지 확인하세요.

else if (조건) {
조건: strcmp 함수를 사용해서 command와 "pop"이 같은지 확인하는 조건을 작성하세요.
[cond_start(3)]
목표: 큐가 비어있는지 확인하세요.

if (조건) {
조건: size가 0인지 확인하는 조건을 작성하세요.
[self_start(4)]
목표: 큐가 비어있으므로 -1을 출력하세요.

printf 함수를 사용해서 "-1\n"을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
목표: 큐가 비어있지 않은 경우를 처리하세요.

else 문을 사용하세요.
[self_start(4)]
목표: 큐의 앞쪽 값을 출력하세요.

printf 함수와 %d 형식 지정자를 사용해서 queue[front]를 출력하고 줄바꿈을 추가하세요.
[self_end(4)]
[self_start(4)]
목표: 원형 큐에서 front 위치를 다음으로 이동시키세요.

front를 (front+1) % 2000000으로 업데이트하세요.
[self_end(4)]
[self_start(4)]
목표: 큐의 크기를 감소시키세요.

size 변수를 1 감소시키세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: size 명령인지 확인하세요.

else if (조건) {
조건: strcmp 함수를 사용해서 command와 "size"가 같은지 확인하는 조건을 작성하세요.
[self_start(3)]
목표: 큐의 크기를 출력하세요.

printf 함수와 %d 형식 지정자를 사용해서 size를 출력하고 줄바꿈을 추가하세요.
[self_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: empty 명령인지 확인하세요.

else if (조건) {
조건: strcmp 함수를 사용해서 command와 "empty"가 같은지 확인하는 조건을 작성하세요.
[cond_start(3)]
목표: 큐가 비어있는지 확인하세요.

if (조건) {
조건: size가 0인지 확인하는 조건을 작성하세요.
[self_start(4)]
목표: 큐가 비어있으므로 1을 출력하세요.

printf 함수를 사용해서 "1\n"을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
목표: 큐가 비어있지 않은 경우를 처리하세요.

else 문을 사용하세요.
[self_start(4)]
목표: 큐가 비어있지 않으므로 0을 출력하세요.

printf 함수를 사용해서 "0\n"을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: front 명령인지 확인하세요.

else if (조건) {
조건: strcmp 함수를 사용해서 command와 "front"가 같은지 확인하는 조건을 작성하세요.
[cond_start(3)]
목표: 큐가 비어있는지 확인하세요.

if (조건) {
조건: size가 0인지 확인하는 조건을 작성하세요.
[self_start(4)]
목표: 큐가 비어있으므로 -1을 출력하세요.

printf 함수를 사용해서 "-1\n"을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
목표: 큐가 비어있지 않은 경우를 처리하세요.

else 문을 사용하세요.
[self_start(4)]
목표: 큐의 앞쪽 값을 출력하세요.

printf 함수와 %d 형식 지정자를 사용해서 queue[front]를 출력하고 줄바꿈을 추가하세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[cond_start(2)]
목표: back 명령인지 확인하세요.

else if (조건) {
조건: strcmp 함수를 사용해서 command와 "back"이 같은지 확인하는 조건을 작성하세요.
[cond_start(3)]
목표: 큐가 비어있는지 확인하세요.

if (조건) {
조건: size가 0인지 확인하는 조건을 작성하세요.
[self_start(4)]
목표: 큐가 비어있으므로 -1을 출력하세요.

printf 함수를 사용해서 "-1\n"을 출력하세요.
[self_end(4)]
[cond_end(3)]
[cond_start(3)]
목표: 큐가 비어있지 않은 경우를 처리하세요.

else 문을 사용하세요.
[self_start(4)]
목표: 큐의 뒤쪽 값을 출력하세요.

printf 함수와 %d 형식 지정자를 사용해서 queue[rear]를 출력하고 줄바꿈을 추가하세요.
[self_end(4)]
[cond_end(3)]
[cond_end(2)]
[rep_end(1)]
[self_start(1)]
목표: 프로그램을 정상 종료하세요.

return 0을 작성해서 성공적인 종료를 알리세요.
[self_end(1]]
[main_def_end(0)]