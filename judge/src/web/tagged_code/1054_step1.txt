#include <stdio.h>
#include <stdlib.h>
[func_def_start(0)]
int is_same (const char*a, const char*b ) {
[rep_start(1)]
    while (*a &&*b ) {
[cond_start(2)]
if (*a !=*b ) {
[self_start(3)]
return 0;
[self_end(3)]
[cond_end(2)]
}
[self_start(2)]
        a++;
[self_end(2)]
[self_start(2)]
        b++;
[self_end(2)]
[rep_end(1)]
    }
[self_start(1)]
    return (*a =='\0' &&*b =='\0' );
[self_end(1)]
[func_def_end(0)]
}

[main_def_start(0)]
int main () {
[self_start(1)]
    const int MAX =10000;
[self_end(1)]
[self_start(1)]
    int stack[10000];
[self_end(1)]
[self_start(1)]
    int top_index =-1;
[self_end(1)]
[self_start(1)]
    int N;
[self_end(1)]
[self_start(1)]
    scanf ("%d", &N );
[self_end(1)]
[self_start(1)]
    char command[6];
[self_end(1)]
[rep_start(1)]
    for (int i =0; i <N; i++) {
[self_start(2)]
        scanf ("%s", command );
[self_end(2)]
[cond_start(2)]
        if (is_same (command, "push" ) ) {
[self_start(3)]
            int x;
[self_end(3)]
[self_start(3)]
            scanf ("%d", &x );
[self_end(3)]
[self_start(3)]
            top_index++;
[self_end(3)]
[self_start(3)]
            stack[top_index] =x;
[self_end(3)]
[cond_end(2)]
        }
[cond_start(2)]
        else if (is_same (command, "pop" ) ) {
[cond_start(3)]
            if (top_index ==-1 ) {
[self_start(4)]
                printf ("-1\n" );
[self_end(4)]
[cond_end(3)]
            }
[cond_start(3)]
            else {
[self_start(4)]
                printf ("%d\n", stack[top_index] );
[self_end(4)]
[self_start(4)]
                top_index--;
[self_end(4)]
[cond_end(3)]
            }
[cond_end(2)]
        }
[cond_start(2)]
        else if (is_same (command, "size" ) ) {
[self_start(3)]
            printf ("%d\n", top_index +1 );
[self_end(3)]
[cond_end(2)]
        }
[cond_start(2)]
        else if (is_same (command, "empty" ) ) {
[cond_start(3)]
            if (top_index ==-1 ) {
[self_start(4)]
                printf ("1\n" );
[self_end(4)]
[cond_end(3)]
            }
[cond_start(3)]
            else {
[self_start(4)]
                printf ("0\n" );
[self_end(4)]
[cond_end(3)]
            }
[cond_end(2)]
        }
[cond_start(2)]
        else if (is_same (command, "top" ) ) {
[cond_start(3)]
            if (top_index ==-1 ) {
[self_start(4)]
                printf ("-1\n" );
[self_end(4)]
[cond_end(3)]
            }
[cond_start(3)]
            else {
[self_start(4)]
                printf ("%d\n", stack[top_index] );
[self_end(4)]
[cond_end(3)]
            }
[cond_end(2)]
        }
[rep_end(1)]
    }
[self_start(1)]
    return 0;
[self_end(1)]
[main_def_end(0)]
}
