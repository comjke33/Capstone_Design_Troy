[func_def_start(0)]
main 함수입니다.
[self_start(1)]
주차장의 행과 열을 저장할 변수 r과 c를 선언하세요.
[self_end(1)]
[self_start(1)]
주차장의 상태를 저장할 2차원 char 배열 map을 선언하세요.
입력 크기에 맞추어 최대 크기를 51로 설정하세요.
[self_end(1)]
[self_start(1)]
차를 부수는 경우의 수를 기록할 배열 count를 선언하고, 모든 값을 0으로 초기화하세요.
이 배열은 0부터 4까지의 인덱스를 사용하여 각 경우에 따른 주차 공간의 수를 기록합니다.
[self_end(1)]

[self_start(1)]
입력으로 주어진 행과 열의 크기를 읽어들이세요.
[self_end(1)]

[rep_start(1)]
주차장의 각 행에 대해 반복합니다.
[self_start(2)]
각 행의 정보를 입력받아 배열 map에 저장하세요.
[self_end(2)]
[rep_end(1)]

[rep_start(1)]
주차 가능한 공간을 탐색하기 위한 이중 반복문을 사용하되, 각 반복문은 주차 공간이 2x2 배열 형태로 확인되도록 설정하세요.
[self_start(2)]
각 주차 공간의 상태를 저장할 변수를 car를 0으로 초기화하세요.
[self_end(2)]
[cond_start(3)]
주차 공간의 2x2가 벽(#)으로 막혀 있는지 확인하는 조건문을 작성하세요.
[self_start(4)]
만약 벽이 있는 경우, 해당 공간은 주차할 수 없으므로 다음 반복으로 넘어가세요.
[self_end(4)]
[cond_end(3)]

[cond_start(3)]
map의 각 칸이 차('X')인지 확인하고, 차가 있다면 car 변수를 증가시키세요.
각 칸을 차례로 검사합니다.
[self_start(4)]
car 값을 증가시키고 다음 칸으로 진행하세요.
[self_end(4)]
[cond_end(3)]

[self_start(3)]
현재 주차할 수 있는 공간의 경우에 해당하는 car 인덱스를 가진 count 배열의 값을 증가시키세요.
[self_end(3)]
[rep_end(2)]
[rep_end(1)]

[rep_start(1)]
각 상황에 따른 주차 가능한 공간의 수를 출력하세요.
[self_start(2)]
count 배열의 각 값을 차례로 출력합니다.
[self_end(2)]
[rep_end(1)]

[self_start(1)]
프로그램을 종료하세요.
[self_end(1)]
[func_def_end(0)]
}